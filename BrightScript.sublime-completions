{
    "scope": "source.brightscript",

    "completions":
    [

    // key words
    {"trigger": "and\tkeyword", "contents": "and"},
    {"trigger": "as\tkeyword", "contents": "as"},
    {"trigger": "False\tkeyword", "contents": "False"},
    {"trigger": "for\tkeyword", "contents": "for"},
    {"trigger": "in\tkeyword", "contents": "in"},
    {"trigger": "Invalid\tkeyword", "contents": "Invalid"},
    {"trigger": "not\tkeyword", "contents": "not"},
    {"trigger": "or\tkeyword", "contents": "or"},
    {"trigger": "print\tkeyword", "contents": "print"},
    {"trigger": "return\tkeyword", "contents": "return"},
    {"trigger": "True\tkeyword", "contents": "True"},
    {"trigger": "while\tkeyword", "contents": "while"},


    // Brightscript Components
    {"trigger": "roAppInfo\tComponent", "contents": "roAppInfo"},
    {"trigger": "roAppManager\tComponent", "contents": "roAppManager"},
    {"trigger": "roArray\tComponent", "contents": "roArray"},
    {"trigger": "roAssociativeArray\tComponent", "contents": "roAssociativeArray"},
    {"trigger": "roAudioMetadata\tComponent", "contents": "roAudioMetadata"},
    {"trigger": "roAudioPlayer\tComponent", "contents": "roAudioPlayer"},
    {"trigger": "roAudioResource\tComponent", "contents": "roAudioResource"},
    {"trigger": "roBitmap\tComponent", "contents": "roBitmap"},
    {"trigger": "roBoolean\tComponent", "contents": "roBoolean"},
    {"trigger": "roByteArray\tComponent", "contents": "roByteArray"},
    {"trigger": "roCaptionRenderer\tComponent", "contents": "roCaptionRenderer"},
    {"trigger": "roChannelStore\tComponent", "contents": "roChannelStore"},
    {"trigger": "roCodeRegistrationScreen\tComponent", "contents": "roCodeRegistrationScreen"},
    {"trigger": "roCompositor\tComponent", "contents": "roCompositor"},
    {"trigger": "roDataGramSocket\tComponent", "contents": "roDataGramSocket"},
    {"trigger": "roDateTime\tComponent", "contents": "roDateTime"},
    {"trigger": "roDeviceInfo\tComponent", "contents": "roDeviceInfo"},
    {"trigger": "roEVPCipher\tComponent", "contents": "roEVPCipher"},
    {"trigger": "roEVPDigest\tComponent", "contents": "roEVPDigest"},
    {"trigger": "roFileSystem\tComponent", "contents": "roFileSystem"},
    {"trigger": "roFloat\tComponent", "contents": "roFloat"},
    {"trigger": "roFont\tComponent", "contents": "roFont"},
    {"trigger": "roFontRegistry\tComponent", "contents": "roFontRegistry"},
    {"trigger": "roFunction\tComponent", "contents": "roFunction"},
    {"trigger": "roGridScreen\tComponent", "contents": "roGridScreen"},
    {"trigger": "roHMAC\tComponent", "contents": "roHMAC"},
    {"trigger": "roImageCanvas\tComponent", "contents": "roImageCanvas"},
    {"trigger": "roImageMetadata\tComponent", "contents": "roImageMetadata"},
    {"trigger": "roInt\tComponent", "contents": "roInt"},
    {"trigger": "roInvalid\tComponent", "contents": "roInvalid"},
    {"trigger": "roKeyboardScreen\tComponent", "contents": "roKeyboardScreen"},
    {"trigger": "roList\tComponent", "contents": "roList"},
    {"trigger": "roListScreen\tComponent", "contents": "roListScreen"},
    {"trigger": "roLocalization\tComponent", "contents": "roLocalization"},
    {"trigger": "roMessageDialog\tComponent", "contents": "roMessageDialog"},
    {"trigger": "roMessagePort\tComponent", "contents": "roMessagePort"},
    {"trigger": "roOneLineDialog\tComponent", "contents": "roOneLineDialog"},
    {"trigger": "roParagraphScreen\tComponent", "contents": "roParagraphScreen"},
    {"trigger": "roPath\tComponent", "contents": "roPath"},
    {"trigger": "roPinEntryDialog\tComponent", "contents": "roPinEntryDialog"},
    {"trigger": "roPosterScreen\tComponent", "contents": "roPosterScreen"},
    {"trigger": "roRegex\tComponent", "contents": "roRegex"},
    {"trigger": "roRegion\tComponent", "contents": "roRegion"},
    {"trigger": "roRegistry\tComponent", "contents": "roRegistry"},
    {"trigger": "roRegistrySection\tComponent", "contents": "roRegistrySection"},
    {"trigger": "roRSA\tComponent", "contents": "roRSA"},
    {"trigger": "roScreen\tComponent", "contents": "roScreen"},
    {"trigger": "roSearchHistory\tComponent", "contents": "roSearchHistory"},
    {"trigger": "roSearchScreen\tComponent", "contents": "roSearchScreen"},
    {"trigger": "roSlideShow\tComponent", "contents": "roSlideShow"},
    {"trigger": "roSocketAddress\tComponent", "contents": "roSocketAddress"},
    {"trigger": "roSpringboardScreen\tComponent", "contents": "roSpringboardScreen"},
    {"trigger": "roSprite\tComponent", "contents": "roSprite"},
    {"trigger": "roStreamSocket\tComponent", "contents": "roStreamSocket"},
    {"trigger": "roString\tComponent", "contents": "roString"},
    {"trigger": "roSystemLog\tComponent", "contents": "roSystemLog"},
    {"trigger": "roTextScreen\tComponent", "contents": "roTextScreen"},
    {"trigger": "roTextureManager\tComponent", "contents": "roTextureManager"},
    {"trigger": "roTextureRequest\tComponent", "contents": "roTextureRequest"},
    {"trigger": "roTimespan\tComponent", "contents": "roTimespan"},
    {"trigger": "roUrlTransfer\tComponent", "contents": "roUrlTransfer"},
    {"trigger": "roVideoPlayer\tComponent", "contents": "roVideoPlayer"},
    {"trigger": "roVideoScreen\tComponent", "contents": "roVideoScreen"},
    {"trigger": "roXMLElement\tComponent", "contents": "roXMLElement"},
    {"trigger": "roXMLList \tComponent", "contents": "roXMLList "},

    //ifAppInfo Methods
    {"trigger": "GetID()\tifAppInfo - as String", "contents": "GetID()"},
    {"trigger": "IsDev()\tifAppInfo - as Boolean", "contents": "IsDev()"},
    {"trigger": "GetVersion()\tifAppInfo - as String", "contents": "GetVersion()"},
    {"trigger": "GetTitle()\tifAppInfo - as String", "contents": "GetTitle()"},
    {"trigger": "GetSubtitle()\tifAppInfo - as String", "contents": "GetSubtitle()"},
    {"trigger": "GetDevID()\tifAppInfo - as String", "contents": "GetDevID()"},
    {"trigger": "GetValue()\tifAppInfo - as String", "contents": "GetValue(${1:key as String})"},

    // ifAppManager Methods
    {"trigger": "SetTheme()\tifAppManager - as Void", "contents": "SetTheme(${1:attributeArray as Object})"},
    {"trigger": "SetThemeAttribute()\tifAppManager - as Void", "contents": "SetThemeAttribute(${1:attributeName as String}, ${2:attributeValue as String})"},
    {"trigger": "ClearThemeAttribute()\tifAppManager - as Void", "contents": "ClearThemeAttribute(${1:attributeName as String})"},
    {"trigger": "GetUpTime()\tifAppManager - as Object", "contents": "GetUpTime()"},

    // ifArray Methods
    {"trigger": "Peek()\tifArray - as Dynamic", "contents": "Peek()"},
    {"trigger": "Pop()\tifArray - as Dynamic", "contents": "Pop()"},
    {"trigger": "Push()\tifArray - as Void", "contents": "Push(${1:tvalue as Dynamic})"},
    {"trigger": "Shift()\tifArray - as Dynamic", "contents": "Shift()"},
    {"trigger": "Unshift()\tifArray - as Void", "contents": "Unshift(${1:tvalue as Dynamic})"},
    {"trigger": "Delete()\tifArray - as Boolean", "contents": "Delete(${1:index as Integer})"},
    {"trigger": "Count()\tifArray - as Integer", "contents": "Count()"},
    {"trigger": "Clear()\tifArray - as Void", "contents": "Clear()"},
    {"trigger": "Append()\tifArray - as Void", "contents": "Append(${1:array as Object})"},
    {"trigger": "GetEntry()\tifArray - as Dynamic", "contents": "GetEntry(${1:index as Integer})"},
    {"trigger": "SetEntry()\tifArray - as Void", "contents": "SetEntry(${1:index as Integer}, ${2:tvalue as Dynamic})"},

    // ifAssociativeArray Methods
    {"trigger": "AddReplace()\tifAssociativeArray - as Void", "contents": "AddReplace(${1:key as String}, ${2:value as Dynamic})"},
    {"trigger": "Lookup()\tifAssociativeArray - as Dynamic", "contents": "Lookup(${1:key as String})"},
    {"trigger": "DoesExist()\tifAssociativeArray - as Boolean", "contents": "DoesExist(${1:key as String})"},
    {"trigger": "Delete()\tifAssociativeArray - as Boolean", "contents": "Delete(${1:key as String})"},
    {"trigger": "Clear()\tifAssociativeArray - as Void", "contents": "Clear()"},
    {"trigger": "SetModeCaseSensitive()\tifAssociativeArray - as Void", "contents": "SetModeCaseSensitive()"},
    {"trigger": "LookupCI()\tifAssociativeArray - as Dynamic", "contents": "LookupCI(${1:key as String})"},
    {"trigger": "Append()\tifAssociativeArray - as Void", "contents": "Append(${1:aa as Object})"},
    {"trigger": "Count()\tifAssociativeArray - as Integer", "contents": "Count()"},

    // ifAudioMetadata Methods
    {"trigger": "SetUrl()\tifAudioMetadata - as Void", "contents": "SetUrl(${1:url as String})"},
    {"trigger": "GetTags()\tifAudioMetadata - as Object", "contents": "GetTags()"},
    {"trigger": "GetAudioProperties()\tifAudioMetadata - as Object", "contents": "GetAudioProperties()"},
    {"trigger": "GetCoverArt()\tifAudioMetadata - as Object", "contents": "GetCoverArt()"},

    // ifAudioPlayer Methods
    {"trigger": "SetContentList()\tifAudioPlayer - as Void", "contents": "SetContentList(${1:contentList as Object})"},
    {"trigger": "AddContent()\tifAudioMetadata - as Void", "contents": "AddContent(${1:contentItem as Object})"},
    {"trigger": "ClearContent()\tifAudioMetadata - as Void", "contents": "ClearContent()"},
    {"trigger": "Play()\tifAudioMetadata - as Boolean", "contents": "Play()"},
    {"trigger": "Stop()\tifAudioMetadata - as Boolean", "contents": "Stop()"},
    {"trigger": "Pause()\tifAudioMetadata - as Boolean", "contents": "Pause()"},
    {"trigger": "Resume()\tifAudioMetadata - as Boolean", "contents": "Resume()"},
    {"trigger": "SetLoop()\tifAudioMetadata - as Void", "contents": "SetLoop(${1:enable as Boolean})"},
    {"trigger": "SetNext()\tifAudioMetadata - as Void", "contents": "SetNext(${1:item as Integer})"},
    {"trigger": "Seek()\tifAudioMetadata - as Boolean", "contents": "Seek(${1:offsetMs as Integer})"},
    {"trigger": "SetTimeMetaDataForKeys()\tifAudioMetadata - as Void", "contents": "SetTimeMetaDataForKeys(${1:keys as Dynamic})"},

    // ifAudioResource Methods
    {"trigger": "Trigger()\tifAudioResource - as Void", "contents": "Trigger(${1:volume as Integer})"},
    {"trigger": "IsPlaying()\tifAudioResource - as Boolean", "contents": "IsPlaying()"},
    {"trigger": "Stop()\tifAudioResource - as Void", "contents": "Stop()"},
    {"trigger": "MaxSimulStreams()\tifAudioResource - as Integer", "contents": "MaxSimulStreams()"},
    {"trigger": "GetMetaData()\tifAudioResource - as Object", "contents": "GetMetaData()"},

    // ifBytArray Methods
    {"trigger": "WriteFile()\tifByteArray - as Boolean", "contents": "WriteFile(${1:path as String}${2:, [start_index as Integer]}${3:, [length as Integer]})"},
    {"trigger": "ReadFile()\tifByteArray - as Boolean", "contents": "ReadFile(${1:path as String}${2:, [start_pos as Integer]}${3:, [length as Integer]})"},
    {"trigger": "AppendFile()\tifByteArray - as Boolean", "contents": "AppendFile(${1:path as String})"},
    {"trigger": "SetResize()\tifByteArray - as Boolean", "contents": "SetResize(${1:min_size as Integer}, ${2:auto_resize as Boolean})"},
    {"trigger": "ToHexString()\tifByteArray - as String", "contents": "ToHexString()"},
    {"trigger": "FromHexString()\tifByteArray - as Void", "contents": "FromHexString(${1:hexstring as String})"},
    {"trigger": "ToBase64String()\tifByteArray - as String", "contents": "ToBase64String()"},
    {"trigger": "FromBase64String()\tifByteArray - as Void", "contents": "FromBase64String(${1:s as String})"},
    {"trigger": "ToAsciiString()\tifByteArray - as String", "contents": "ToAsciiString()"},
    {"trigger": "FromAsciiString()\tifByteArray", "contents": "FromAsciiString(${1:s as String})"},
    {"trigger": "GetSignedByte()\tifByteArray - as Integer", "contents": "GetSignedByte(${1:index as Integer})"},
    {"trigger": "GetSignedLong()\tifByteArray - as Integer", "contents": "GetSignedLong(${1:index as Integer})"},
    {"trigger": "IsLittleEndianCPU()\tifByteArray - as Boolean", "contents": "IsLittleEndianCPU()"},






 
    // ifScreen Methods
    {"trigger": "SwapBuffers()\tMethod - as Void", "contents": "SwapBuffers()"},
    
    // ifDraw2D Methods
    {"trigger": "Clear()\tMethod - as Void", "contents": "Clear(${1:rgba as Integer})"},
    {"trigger": "GetWidth()\tMethod - as Integer", "contents": "GetWidth()"},
    {"trigger": "GetHeight()\tMethod - as Integer", "contents": "GetHeight()"},
    {"trigger": "GetByteArray()\tMethod - as Object", "contents": "GetByteArray(${1:x as Integer}, ${2:y as Integer}, ${3:width as Integer}, ${4:height as Integer})"},
    {"trigger": "GetAlphaEnable()\tMethod - as Boolean", "contents": "GetAlphaEnable()"},
    {"trigger": "SetAlphaEnable()\tMethod - as Void", "contents": "SetAlphaEnable(${1:enable as Boolean})"},
    {"trigger": "DrawRect()\tMethod - as Void", "contents": "DrawRect(${1:x as Integer}, ${2:y as Integer}, ${3:width as Integer}, ${4:height as Integer}, ${5:rgba as Integer})"},
    {"trigger": "DrawPoint()\tMethod - as Void", "contents": "DrawPoint(${1:x as Integer}, ${2:y as Integer}, ${3:size as Float}, ${4:rgba as Integer})"},
    {"trigger": "DrawLine()\tMethod - as Void", "contents": "DrawLine(${1:xStart as Integer}, ${2:yStart as Integer}, ${3:xEnd as Integer}, ${4:yEnd as Integer}, ${5:rgba as Integer})"},
    {"trigger": "DrawObject()\tMethod - as Boolean", "contents": "DrawObject(${1:x as Integer}, ${2:y as Integer}, ${3:src as Object}${4: [, rgba as Integer]})"},
    {"trigger": "DrawScaledObject()\tMethod - as Boolean", "contents": "DrawScaledObject(${1:x as Integer}, ${2:y as Integer}, ${3:scaleX as Float}, ${4:scaleY as Float}, ${5:src as Object}${6: [, rgba as Integer]})"},
    {"trigger": "DrawRotatedObject()\tMethod - as Boolean", "contents": "DrawRotatedObject(${1:x as Integer}, ${2:y as Integer}, ${3:theta as Float}, ${4:src as Object}${5: [, rgba as Integer]})"},
    {"trigger": "DrawText()\tMethod - as Boolean", "contents": "DrawText(${1:text as String}, ${2:x as Integer}, ${3:y as Integer}, ${4:rgba as Integer}, ${5:font as Object})"},
    {"trigger": "Finish()\tMethod - as Void", "contents": "Finish()"},

    // ifSetMessagePort Methods
    {"trigger": "SetMessagePort()\tifSetMessagePort - as Void", "contents": "SetMessagePort(${1:port as Object})"},
    
    // ifGetMessagePort Methods
    {"trigger": "GetMessagePort()\tifGetMessagePort - as Object", "contents": "GetMessagePort()"},
    
    // Advanced Snippits
    { "trigger": "Function\tCreate New Function", "contents": "Function ${1:newFunction} (${2})\n\t${3:}\nEnd Function" },
    { "trigger": "If\tIf Statement", "contents": "If ${1}\n\t${2}\nEnd If" },
    { "trigger": "Else If", "contents": "Else If ${1}\n\t${2}" },
    { "trigger": "CreateObject", "contents": "CreateObject(\"${1}\")" }

    // "Abs", "AddAttribute", "AddBodyElement", "AddElement", "AddElementWithBody", "AddHead", "AddReplace", "AddTail", "Append", "AppendFile", "AppendString", "As", "Asc", 
    // "Atn", "BLOCK IF", "Boolean", "Box", "Cdbl", "Chr", "Clear", "CopyFile", "Cos", "Count", "CreateDirectory", "Csng", "Delete", "DeleteDirectory", "DeleteFile", 
    // "DIM", "DoesExist", "Double", "Dynamic", "Else", "Else If", "END",  "ENDIF", "Exit While", "Exp", "Fix", "Float", "FOR", "FOR EACH", "FormatDrive", "FromAsciiString",
    // "FromBase64String", "FromHexString", "GenXML", "GenXMLHeader", "GetAttributes", "GetBody", "GetBoolean", "GetChildElements", "GetEntityEncode", "GetEntry", "GetFloat", 
    // "GetHead", "GetIndex", "GetInt", "GetInterface", "GetLastRunCompileError", "GetLastRunRuntimeError", "GetMessage", "GetName", "GetNamedElements", "GetSignedByte", "GetString",
    // "GetSub", "GetTail", "GetText", "GOTO", "HasAttribute", "IN", "Instr", "Int", "Integer", "Interface",  "IsEmpty", "IsLittleEndianCPU", "IsName", 
    // "IsNext", "LCase", "Left", "Len", "ListDir", "Log", "Lookup", "MatchFiles", "MD5", "Mid", "NEXT", "Next", "Object", "Parse", "Peek", "Pop", "PostMessage", "PRINT", "Push", 
    // "ReadAsciiFile", "ReadFile", "RebootSystem", "REM", "RemoveHead", "RemoveIndex", "RemoveTail", "Reset", "ResetIndex", "RETURN", "Right", "Rnd", 
    // "Run", "SetBody", "SetBoolean", "SetEntry", "SetFloat", "SetInt", "SetModeCaseSensitive", "SetName", "SetResize", "SetString", "SetSub", "Sgn", "Shift", "Simplify", "Sin", "Sleep", "Sqr", 
    // "STEP", "STOP", "Str", "Stri", "String", "Tan", "THEN", "TO", "ToAsciiString", "ToBase64String", "ToHexString", "Tokenize", "Trim", "Type", "UCase", "Unshift", "UpTime", 
    // "Val", "Void", "Wait", "WaitMessage", "While", "WriteAsciiFile", "WriteFile" 
    ]
}
